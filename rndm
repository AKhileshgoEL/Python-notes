https://www.youtube.com/watch?v=-UwZQfOp64M&t=116s

import os
import datetime
from pathlib import Path
import yaml

def delete_old_files(path, file_pattern, past_days):
    today = datetime.datetime.now()
    from_date = today - datetime.timedelta(days=past_days)

    selected_files = Path(path).glob(f'{file_pattern}')

    for file_path in selected_files:
        date_part = file_path.stem.split('_')[1]
        file_date = datetime.datetime.strptime(date_part, '%Y%m%d')

        if file_date < from_date:
            try:
                os.remove(file_path)
                print(f"Deleted: {file_path}")
            except Exception as e:
                print(f"Error deleting {file_path}: {e}")


def read_config(file_path='config.yml'):     # file path is entered where all 3 parameters are stored  
    with open(file_path, 'r') as yaml_file:  # the config.yml file is opened in read mode 
        config = yaml.safe_load(yaml_file)   # safe_load is used to load yml data(safer option) , whereas load is uesd to load and execute 
    return config

# Main script

if __name__ == "__main__":
    # Assume read_config() returns a dictionary with default values if not found
    config = {'path': 'default_path', 'file_pattern': 'default_pattern', 'past_days': 0}

    # Get values from the config dictionary
    path = config['path']
    file_pattern = config['file_pattern']
    past_days = config['past_days']

    # Assume delete_old_files() does some basic printing
    print(f"Deleting old files from path: {path}, matching pattern: {file_pattern}, past days: {past_days}")
    # delete_old_files(path, file_pattern, past_days)


path: r'C:\Users\egoeakh\OneDrive - Ericsson\Documents\nosscire\Assignment\Solution 2'
file_pattern: 'scriptmain1_*.csv'
past_days: 5







import os
import datetime
from pathlib import Path
import logging

# Configure logging
log_file_path = 'delete_old_files.log'
logging.basicConfig(filename=log_file_path, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def delete_old_files(path, file_pattern, past_days):
    today = datetime.datetime.now()  
    from_date = today - datetime.timedelta(days=past_days)

    selected_files = Path(path).glob(f'{file_pattern}')

    for file_path in selected_files:
        date_part = file_path.stem.split('_')[1]
        file_date = datetime.datetime.strptime(date_part, '%Y%m%d')

        if file_date < from_date:
            try:
                os.remove(file_path)
                logging.info(f"Deleted: {file_path}")
            except Exception as e: 
                logging.error(f"Error deleting {file_path}: {e}")

# Main script
if __name__ == "__main__":
    path = r'C:\Users\egoeakh\OneDrive - Ericsson\Documents\nosscire\Assignment\Solution 2'
    file_pattern = 'scriptmain1_*.csv'
    past_days = 5

    try:
        delete_old_files(path, file_pattern, past_days)
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")
